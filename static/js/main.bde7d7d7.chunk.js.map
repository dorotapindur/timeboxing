{"version":3,"sources":["components/MainHeader.js","components/TimeboxEditor.js","components/Clock.js","components/ProgressBar.js","components/CurrentTimebox.js","lib/time.js","components/EditableTimebox.js","components/ErrorBoundary.js","components/App.js","index.js"],"names":["MainHeader","headerClassName","isRunning","className","TimeboxEditor","props","title","totalTimeInMinutes","onTitleChange","onTotalTimeInMinutesChange","onConfirm","isEditable","onStart","inactive","timeboxEditorClassName","classNames","disabled","value","onChange","type","onClick","Clock","hours","minutes","seconds","over","hoursFormatted","toString","padStart","minutesFormatted","secondsFormatted","clockClassName","ProgressBar","percent","trackRemaining","progressBarClassName","style","paddingLeft","paddingRight","CurrentTimebox","durationInSeconds","isPaused","pausesCount","elapsedTimeInSeconds","onStop","onEdit","onPause","totalTime","Math","floor","hoursLeft","minutesLeft","secondsLeft","progressInPercent","almostOver","currentTimeboxClassName","pauseButtonClassName","uuidv4","EditableTimebox","state","handleTitleChange","event","setState","target","handleTotalTimeInMinutesChange","handleConfirm","startTimer","handleEdit","pauseTimer","handleStart","console","log","intervalId","handleStop","stopTimer","togglePause","prevState","this","count","window","setInterval","clearInterval","Audio","play","React","Component","ErrorBoundary","hasError","error","errorInfo","message","children","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bde7d7d7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/scss-components/MainHeader.scss\";\n\nfunction MainHeader({ isRunning }) {\n    \n    let headerClassName = 'MainHeader';\n    if (isRunning === false) {\n        headerClassName = 'MainHeader shake'\n    }\n    return (\n        <>\n            <h1 className={headerClassName}>minutnik</h1>\n            <span></span>\n        </>\n    )\n}\n\nexport default MainHeader;","import React from \"react\";\nimport classNames from \"classnames\";\nimport \"../styles/scss-components/TimeboxEditor.scss\";\n\nfunction TimeboxEditor(props) {\n    const { \n        title, \n        totalTimeInMinutes,\n        onTitleChange,\n        onTotalTimeInMinutesChange,\n        onConfirm,\n        isEditable,\n        isRunning,\n        onStart\n    } = props;\n    let inactive = true;\n    if (isRunning === true) {\n        if (isEditable === true) {inactive = false}\n        else {inactive = true}\n    }\n    else {inactive = false}\n    let timeboxEditorClassName = classNames(\n        \"TimeboxEditor\",\n        {\n            \"inactive\": inactive,\n        }\n    )\n    return (\n        <div className={timeboxEditorClassName}>\n            <label>Co robisz? <input\n                disabled={inactive}\n                value={title}\n                onChange={onTitleChange}\n                type=\"text\" />\n            </label><br />\n            <label>Ile minut? <input \n                disabled={inactive}\n                value={totalTimeInMinutes}\n                onChange={onTotalTimeInMinutesChange}\n                type=\"number\" />\n            </label><br />\n            <button\n                onClick={onStart}\n                disabled={isRunning}>Zacznij\n            </button>\n            <button \n                onClick={onConfirm}\n                disabled={!isEditable}>Zatwierdź zmiany\n            </button>\n            <p className={`orangered ${!isRunning ? \"inactive\" : \"\"}` }>w toku</p>\n        </div>\n    )\n};\n\nexport default TimeboxEditor;","import React from \"react\";\nimport classNames from \"classnames\";\nimport \"../styles/scss-components/Clock.scss\";\nimport PropTypes from \"prop-types\";\n\nfunction Clock({ hours, minutes, seconds, over}) {\n    if (hours < 0) {hours = 0}\n    if (hours > 23) {hours = 23}\n    if (minutes < 0) {minutes = 0}\n    if (minutes > 59) {minutes = 59}\n    if (seconds < 0) {seconds = 0}\n    if (seconds > 59) {seconds = 59}\n    let hoursFormatted = hours.toString().padStart(2, '0');\n    let minutesFormatted = minutes.toString().padStart(2, '0');\n    let secondsFormatted = seconds.toString().padStart(2, '0');\n    let clockClassName = classNames(\n        \"Clock\",\n        {\n            \"timeisup\": over,\n        }\n        );\n    return (\n        <div>\n            <p className={clockClassName}>Pozostało {hoursFormatted}:{minutesFormatted}:{secondsFormatted}</p>\n        </div>\n        )\n};\n\nconst NumbeOrStringType = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nClock.propTypes = {\n    hours: NumbeOrStringType.isRequired,\n    minutes: NumbeOrStringType.isRequired,\n    seconds: NumbeOrStringType.isRequired,\n};\nexport default Clock;","import React from \"react\";\nimport classNames from \"classnames\";\nimport \"../styles/scss-components/ProgressBar.scss\";\n\nfunction ProgressBar({ percent, over, trackRemaining = false, }) {\n    if (percent > 100) {percent=100};\n    if (percent < 0) {percent=0};\n    let progressBarClassName = classNames(\n        \"ProgressBar\",\n        {\n            \"timeisup\": over,\n        }\n        );\n    if (trackRemaining)  \n        return (<div className={progressBarClassName} style={{ paddingLeft: `${percent}%` }}></div>)\n        else return (<div className={progressBarClassName} style={{ paddingRight: `${100 - percent}%` }}></div>);\n};\n\nexport default ProgressBar;","import React from \"react\";\nimport Clock from \"./Clock\";\nimport ProgressBar from \"./ProgressBar\";\nimport classNames from \"classnames\";\nimport \"../styles/scss-components/CurrentTimebox.scss\";\nimport { getHoursMinutesAndSecondsLeftFromDurationInSeconds } from \"../lib/time\";\n\nfunction CurrentTimebox (props) {\n    const {\n        title,\n        isEditable,\n        isRunning,\n        isPaused,\n        pausesCount,\n        elapsedTimeInSeconds,\n        onStop,\n        onEdit,\n        onPause,\n        totalTime,\n    } = props\n                    \n    const timeLeftInSeconds = totalTime - elapsedTimeInSeconds;\n    const [hoursLeft, minutesLeft, secondsLeft] = getHoursMinutesAndSecondsLeftFromDurationInSeconds(timeLeftInSeconds);\n    const progressInPercent = (elapsedTimeInSeconds/totalTime) * 100;\n    let inactive = true;\n    if (isRunning) { \n        isEditable ? inactive = true : inactive = false\n    } else { inactive = true }\n    let almostOver = false;\n    if (progressInPercent > 80 && !inactive) {almostOver = true};\n    let currentTimeboxClassName = classNames(\n        \"CurrentTimebox\",\n        {\n            \"inactive\": inactive,\n        }\n    )\n    let pauseButtonClassName = classNames(\n        \"\",\n        {\n            \"blink\": isPaused,\n        }\n    )\n    return (\n        <div className={currentTimeboxClassName}>\n            <h2>{title}</h2>\n            <Clock \n                hours={hoursLeft}\n                minutes={minutesLeft}\n                seconds={secondsLeft}\n                over={almostOver}/>\n            <ProgressBar \n                percent={progressInPercent} \n                over={almostOver} />\n            <button\n                onClick={onEdit}\n                disabled={inactive}>Edytuj</button>\n            <button\n                onClick={onStop}\n                disabled={inactive}>Stop/Reset</button>\n            <button\n                className={pauseButtonClassName}\n                onClick={onPause}\n                disabled={inactive}>{isPaused ? \"Wznów\" : \"Pauzuj\"}</button>\n            <p>Liczba przerw: {pausesCount}</p>\n        </div>\n    )\n    \n};\n\nexport default CurrentTimebox;","function getHoursMinutesAndSecondsLeftFromDurationInSeconds(durationInSeconds) {\n    const hours = Math.floor(durationInSeconds/3600);\n    const minutes = Math.floor(durationInSeconds/60);\n    const seconds = Math.floor(durationInSeconds%60);\n    return [hours, minutes, seconds];\n}\n\nexport {\n    getHoursMinutesAndSecondsLeftFromDurationInSeconds\n}","import React from \"react\";\n\nimport MainHeader from \"./MainHeader\";\nimport TimeboxEditor from \"./TimeboxEditor\";\nimport CurrentTimebox from \"./CurrentTimebox\";\n\nimport { v4 as uuidv4 } from 'uuid';\nuuidv4();\n\nclass EditableTimebox extends React.Component {\n    state = {\n        title: \"Uczę się Reacta\",\n        totalTimeInMinutes: 3,\n        isEditable: false,\n        isRunning: false,\n        isPaused: false,\n        pausesCount: 0,\n        elapsedTimeInSeconds: 0,\n    }\n    componentDidMount() {\n        console.count(\"componentDidMount\");\n    }\n    componentWillUnmount() {\n        console.count(\"componentWillUnmount\");\n    }        \n    handleTitleChange = (event) => {\n        this.setState({title: event.target.value})\n    }\n    handleTotalTimeInMinutesChange = (event) => {\n        this.setState({totalTimeInMinutes: event.target.value})\n    }\n    handleConfirm = () => {\n        this.setState({ isEditable: false });\n        if (!this.state.isPaused) {\n            this.startTimer();\n        }\n    }\n    handleEdit = () => {\n        this.setState({ isEditable: true });\n        this.pauseTimer();\n    }\n    handleStart = ()  => {\n        console.log(\"handle start\")\n        this.setState({ isRunning: true });\n        this.intervalId = null;\n        this.startTimer();\n    }\n    handleStop = () => {\n        console.log(\"handle stop\");\n        this.stopTimer();\n    }\n    togglePause = () => {\n        this.setState(\n            function(prevState) {\n                const isPaused = !prevState.isPaused;\n                if (isPaused) {\n                    this.pauseTimer()\n                } else {\n                    this.startTimer()\n                }\n                return {\n                    isPaused,\n                    pausesCount: isPaused ? prevState.pausesCount + 1 : prevState.pausesCount\n                }\n            }\n        )\n    }\n    \n    startTimer() {\n        if (this.intervalId === null) {\n            this.intervalId = window.setInterval (\n                () => {\n                    this.setState(\n                        (prevState) => ({elapsedTimeInSeconds: prevState.elapsedTimeInSeconds + 0.01})\n                    )\n                    if (this.state.elapsedTimeInSeconds >= this.state.totalTimeInMinutes * 60) {\n                        this.stopTimer();\n                        this.setState({\n                            isRunning: false,\n                        });\n                    }\n                },\n                10\n            );\n        }\n    }\n    pauseTimer() {\n        window.clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n    stopTimer() {\n        window.clearInterval(this.intervalId);\n        this.setState({\n            isRunning: false,\n            isPaused: false,\n            isEditable: false,\n            pausesCount: 0,\n            elapsedTimeInSeconds: 0, \n        });\n\n        function playSound() {\n            const sound = new Audio('https://dorotapindur.github.io/homepage/sounds/ding.mp3');\n            sound.play();\n            console.log('play');    \n        }\n        playSound();   \n    }\n\n    render() {\n        const { title, totalTimeInMinutes, isEditable, isRunning, isPaused, pausesCount, elapsedTimeInSeconds } = this.state;\n        const totalTime = totalTimeInMinutes * 60;\n        \n        return (\n            <>\n                <MainHeader \n                    isRunning={isRunning}\n                />\n                <TimeboxEditor\n                    title={title}\n                    totalTimeInMinutes={totalTimeInMinutes}\n                    totalTime={totalTime}\n                    onTitleChange={this.handleTitleChange}\n                    onTotalTimeInMinutesChange={this.handleTotalTimeInMinutesChange}\n                    isEditable={isEditable}\n                    isRunning={isRunning}\n                    isPaused={isPaused}\n                    onStart={this.handleStart}\n                    onConfirm={this.handleConfirm}\n                    onPause={this.togglePause} />\n                <CurrentTimebox \n                    title={title}\n                    totalTimeInMinutes={totalTimeInMinutes}\n                    totalTime={totalTimeInMinutes * 60}\n                    isEditable={isEditable}\n                    isRunning={isRunning}\n                    isPaused={isPaused}\n                    pausesCount={pausesCount}\n                    elapsedTimeInSeconds={elapsedTimeInSeconds}\n                    onStart={this.handleStart}\n                    onStop={this.handleStop}\n                    onEdit={this.handleEdit}\n                    onPause={this.togglePause} />\n            </>\n        )\n    }\n}\n\n\nexport default EditableTimebox;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass ErrorBoundary extends React.Component {\n    state = {\n        hasError: false,\n    }\n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n    }\n    componentDidCatch(error, errorInfo) {\n        // You can also log the error to an error reporting service\n        console.log(\"Wystąpił następujący błąd:\", error, errorInfo);\n    }\n    render() {\n        const { message, children } = this.props;\n        return this.state.hasError ? message : children;\n    }\n}\nErrorBoundary.propTypes = {\n    message: PropTypes.string.isRequired,\n    children: PropTypes.any.isRequired, //whatever that is not null or undefined\n};\nexport default ErrorBoundary;","import React from \"react\";\nimport EditableTimebox from \"./EditableTimebox\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport \"../styles/scss-components/App.scss\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ErrorBoundary message = \"Coś nie działa w całej aplikacji\">\n                <EditableTimebox />\n            </ErrorBoundary>\n        </div>\n    )\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./styles/main.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}